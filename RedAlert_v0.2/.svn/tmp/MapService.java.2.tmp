package com.youxigu.dynasty2.map.service.impl;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.youxigu.dynasty2.map.dao.IMapDao;
import com.youxigu.dynasty2.map.domain.Country;
import com.youxigu.dynasty2.map.domain.CountryCharacter;
import com.youxigu.dynasty2.map.domain.MapCell;
import com.youxigu.dynasty2.map.domain.State;
import com.youxigu.dynasty2.map.domain.StateCache;
import com.youxigu.dynasty2.map.domain.action.LoadMapAction;
import com.youxigu.dynasty2.map.service.CommandDistatcher;
import com.youxigu.dynasty2.map.service.IMapService;
import com.youxigu.wolf.net.NodeSessionMgr;

/**
 * 大地图
 * 
 * @author LK run on mainServer
 * @date 2016年2月17日
 */
public class MapService implements IMapService {
	public static final Logger log = LoggerFactory.getLogger(MapService.class);

	private Map<Integer, Country> countryMaps = new HashMap<Integer, Country>();// 国家
	private Map<Integer, State> stateMaps = new HashMap<Integer, State>();// 区
	private Map<Integer, MapCell> ALL_CELLS = new ConcurrentHashMap<Integer, MapCell>();// 所有坐标
	private Map<Integer, StateCache> STATE_CELLS = new ConcurrentHashMap<Integer, StateCache>();// 区下的所有坐标
	// private static final int STATE_NUM = 15;// 区总个数
	// private static final int maxThreadNum = STATE_NUM;// 线程数
	// private static final String WORK_NAME_PREFIX = "MAP_THREAD_";
	// private boolean isMapServer = false;

	// private List<Worker> workers = new ArrayList<Worker>();

	private IMapDao mapDao;
	private CommandDistatcher commandDistatcher;

	public void setMapDao(IMapDao mapDao) {
		this.mapDao = mapDao;
	}

	public void setCommandDistatcher(CommandDistatcher commandDistatcher) {
		this.commandDistatcher = commandDistatcher;
	}

	/**
	 * 加载配数
	 */
	private void loadConf() {
		// 放在前面执行。。。保证nodeserver也初始化国家信息
		List<Country> countrys = mapDao.getCountrys();
		if (countrys != null && countrys.size() > 0) {
			//加载所有国家可以创建的角色
			List<CountryCharacter> cc = mapDao.getCountryCharacters();
			for (Country country : countrys) {
				// 国家
				countryMaps.put(country.getCountryId(), country);
				
				//国家关联的角色创建信息
				for(CountryCharacter c : cc){
					country.addCountryCharacter(c);
				}
				
				// 区
				List<State> states = mapDao
						.getStatesByCountryId(country.getCountryId());
				if (states != null && states.size() > 0) {
					for (State state : states) {
						state.setCountry(country);
						stateMaps.put(state.getStateId(), state);
					}
				}
				
			}
			
			
		}
		
		
	}

	/**
	 * 初始化service
	 */
	public void init() {
		// 加载策划配数
		this.loadConf();

		// 只在mainserver上加载
		String str = System.getProperty(NodeSessionMgr.SERVER_TYPE_KEY);
		if (str == null) {
			return;
		}
		int serverType = Integer.parseInt(str);
		if (serverType != NodeSessionMgr.SERVER_TYPE_MAIN) {
			return;
		}

		// isMapServer = true;
		log.info("加载 国家、郡城数据......");

		// // 0号为主线程，刷新资源和npc
		// for (int i = 0; i < maxThreadNum; i++) {
		// Worker worker = new Worker(WORK_NAME_PREFIX + i);
		// worker.start();
		// log.info("启动地图线程{}", worker.getName());
		// workers.add(worker);
		// }

		// 0~14号线程用来加载地图坐标
		if (stateMaps != null && stateMaps.size() > 0) {
			Iterator<Map.Entry<Integer, State>> itl = stateMaps.entrySet()
					.iterator();
			while (itl.hasNext()) {
				Map.Entry<Integer, State> ent = itl.next();
				State state = ent.getValue();
				// Worker worker = this.getWorker(state.getStateId() - 1);
				// worker.put(new LoadMapAction(worker, state, ALL_CELLS,
				// STATE_CELLS));
				commandDistatcher.putCommander(state.getStateId() - 1,
						new LoadMapAction(state, ALL_CELLS, STATE_CELLS));
			}
		}
	}

	// /**
	// * 销毁service
	// */
	// public void destory() {
	// if (!isMapServer) {
	// return;
	// }
	//
	// if (workers != null && workers.size() > 0) {
	// for (Worker worker : workers) {
	// worker.shutDown();
	// worker.weakup();
	// }
	// }
	//
	// log.info("MapService 退出条件达成！");
	// }

	// /**
	// * 分配执行线程
	// *
	// * @param index
	// * @return
	// */
	// private Worker getWorker(int index) {
	// if (index < 0) {
	// // 随机一个线程
	// index = MathUtils.getRandomExMax(1, maxThreadNum);
	// } else if (index >= maxThreadNum) {
	// index = index % maxThreadNum;
	// }
	//
	// Worker worker = workers.get(index);
	// if (!worker.isStart()) {
	// synchronized (worker) {
	// if (!worker.isStart()) {
	// try {
	// worker.setStart(true);
	// worker.start();
	// workers.set(index, worker);
	// } catch (Exception e) {
	// e.printStackTrace();
	// }
	// if (log.isDebugEnabled()) {
	// log.debug("start MapThread:{} ", worker.getName());
	// }
	// }
	// }
	// }
	// return worker;
	// }

	@Override
	public State getStateById(int stateId) {
		return stateMaps.get(stateId);
	}

	@Override
	public Country getCountryById(int countryId) {
		return countryMaps.get(countryId);
	}

	// /**
	// * 线程队列定义
	// *
	// * @author LK
	// * @date 2016年2月5日
	// */
	// public class Worker extends Thread {
	// private DelayQueue<TimeAction> queue;
	// private boolean start = true;
	//
	// public Worker(String name) {
	// this.setDaemon(true);
	// this.setName(name);
	// this.queue = new DelayQueue<TimeAction>();
	// }
	//
	// public boolean isStart() {
	// return start;
	// }
	//
	// public void setStart(boolean start) {
	// this.start = start;
	// }
	//
	// public DelayQueue<TimeAction> getQueue() {
	// return queue;
	// }
	//
	// public void setQueue(DelayQueue<TimeAction> queue) {
	// this.queue = queue;
	// }
	//
	// // 唤醒，在退出系统时用
	// public void weakup() {
	// synchronized (this) {
	// this.notifyAll();
	// }
	// }
	//
	// public void put(TimeAction action) {
	// queue.put(action);
	// }
	//
	// public void shutDown() {
	// start = false;
	// queue.put(new ShutdownAction());
	// }
	//
	// @Override
	// public void run() {
	// while (start) {
	// TimeAction action = null;
	// User user = null;
	// try {
	// action = queue.poll(30, TimeUnit.SECONDS);
	// if (action == null || !start) {
	// continue;
	// }
	//
	// if (action instanceof UserOperAction) {
	// UserOperAction userAction = (UserOperAction) action;
	// user = userAction.getUser();
	// }
	//
	// // 为了可以使用事务
	// IMapService mapService = (IMapService) ServiceLocator
	// .getSpringBean("mapService");
	// long now = System.currentTimeMillis(); // 开始时间
	//
	// if (action instanceof ShutdownAction) {
	// // 线程跳出
	// log.info("thread {} 终止运行.", this.getName());
	// break;
	// } else if (action instanceof LoadMapAction) {
	// // load 地图数据
	// loadMapDataService.loadMapData(STATE_CELLS, ALL_CELLS,
	// (LoadMapAction) action);
	// }
	//
	// if (log.isWarnEnabled()) {
	// // 计算执行的时间
	// long lag = System.currentTimeMillis() - now;
	// if (lag > 5000) {
	// log.warn("命令:{}处理时间过长:{}", action, lag);
	// }
	// }
	// } catch (BaseException e) {
	// // 单推消息：发生逻辑异常
	// String errInfo = e.getErrMsg();
	// if (user != null) {
	// // TODO 推错误消息
	// // chatService.sendEventMessage(userId,
	// // EventMessage.TYPE_ERROR_INFO, errInfo);
	// } else {
	// log.error("map queue未处理的异常--" + errInfo);
	// }
	// } catch (Exception e) {
	// log.error(e.toString(), e);
	// } finally {
	//
	// }
	// }
	// }
	//
	// }

	@Override
	public void updateMapCell(MapCell mapCell) {
		ThreadLocalMapCellCache.addData(mapCell.clone());
	}

	@Override
	public MapCell getMapCell(int id) {
		return ALL_CELLS.get(id);
	}

	@Override
	public Map<Integer, MapCell> getMapCellsByStateId(int stateId) {
		StateCache stateCache = STATE_CELLS.get(stateId);
		if (stateCache != null) {
			return stateCache.getCells();
		}
		return null;
	}

	@Override
	public StateCache getStateCacheByStateId(int stateId) {
		return STATE_CELLS.get(stateId);
	}
}
