package com.youxigu.dynasty2.armyout.service.impl;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.manu.util.UtilDate;
import com.youxigu.dynasty2.armyout.domain.Armyout;
import com.youxigu.dynasty2.armyout.domain.Strategy;
import com.youxigu.dynasty2.armyout.domain.UserArmyout;
import com.youxigu.dynasty2.armyout.domain.action.SpyAction;
import com.youxigu.dynasty2.common.AppConstants;
import com.youxigu.dynasty2.develop.domain.CastleBuilding;
import com.youxigu.dynasty2.map.domain.MapCell;
import com.youxigu.dynasty2.map.domain.action.TimeAction;
import com.youxigu.dynasty2.map.service.impl.command.StrategyCommander;
import com.youxigu.dynasty2.user.domain.User;
import com.youxigu.dynasty2.util.BaseException;

/**
 * 侦查
 * 
 * @author LK
 * @date 2016年2月29日
 */
public class SpyStrategyService extends StrategyCommander {
	public static final Logger log = LoggerFactory
			.getLogger(SpyStrategyService.class);

	@Override
	public void doCheakStrategy(MapCell fromCell, MapCell toCell,
			Strategy strategy, Map<String, Object> params) {
		if (fromCell.getId() == toCell.getId()) {
			throw new BaseException("不能对自己侦查");
		}

		if (toCell.isEmpty(true)) {
			throw new BaseException("目标是个空地，不能侦查");
		}

		if (fromCell.getUserId() == 0 || toCell.getUserId() == 0) {
			throw new BaseException("目标未被玩家占据不能侦查");
		}

		if (fromCell.getUserId() == toCell.getUserId()
				|| (fromCell.getGuildId() > 0
						&& fromCell.getGuildId() == toCell.getGuildId())) {
			throw new BaseException("不能侦查己方目标");
		}

		if (!toCell.isSurface(MapCell.EARTH_TYPE_USER_RES)
				&& !toCell.isSurface(MapCell.CAS_TYPE_USER)) {
			throw new BaseException("侦查目标只能是玩家基地和个人资源点");
		}

		User fromUser = userService.getUserById(fromCell.getUserId());
		User toUser = userService.getUserById(toCell.getUserId());
		if (fromUser == null || toUser == null) {
			throw new BaseException("目标未被玩家占据不能侦查");
		}

		CastleBuilding casBui = castleService.getMaxLevelCastBuildingByEntId(
				fromUser.getMainCastleId(), AppConstants.ENT_BUILDING_RADAR);
		if (casBui == null) {
			throw new BaseException("尚未建造雷达，不能侦查");
		}

		long attackerId = fromUser.getUserId();
		long attackerGuildId = fromUser.getGuildId();

		// 校验出征队列
		UserArmyout userArmyout = armyoutService.lockUserArmyout(attackerId);
		super.cheakArmyoutQueue(userArmyout, strategy);

		// 消耗
		super.doConsume(fromUser, strategy, fromCell, toCell);

		// 所需时间
		double needSecond = armyoutService.getSpyTimeBetweenPoints(fromUser,
				fromCell, toCell);
		int baseTime = (int) Math.ceil(needSecond);
		Timestamp outDttm = UtilDate.nowTimestamp();
		Timestamp outArriveDttm = UtilDate.moveSecond(outDttm, baseTime);

		// 构造armyout
		Armyout armyout = new Armyout(Strategy.COMMAND_201, fromCell.getId(),
				attackerId, attackerGuildId, toCell.getId(), baseTime, outDttm,
				outArriveDttm, outArriveDttm, Armyout.STATUS_FORWARD);
		armyoutService.createArmyOut(armyout);

		// 更新出征队列
		super.updateArmyoutQueue(userArmyout, armyout, strategy);

		// 进入线程队列
		armyoutService.doArmtoutJoinExeQueue(armyout, strategy, fromCell,
				toCell, fromUser);
	}

	@Override
	public Map<String, Object> doExcute(TimeAction action) {
		SpyAction spyAction = (SpyAction) action;
		// 加锁
		List<Integer> cellIds = new ArrayList<Integer>();
		cellIds.add(spyAction.fromCell.getId());
		cellIds.add(spyAction.toCell.getId());
		try {
			mapService.getMapCellForWrite(cellIds);
		} catch (Exception e) {
			// TODO: handle exception
		}

		Armyout armyout = spyAction.armyout;
		armyoutService.deleteArmyOut(armyout);

		// 移除出征队列
		UserArmyout userArmyout = armyoutService
				.lockUserArmyout(spyAction.fromUser.getUserId());
		userArmyout.removeArmyout(armyout.getId());
		armyoutService.updateUserArmyout(userArmyout);

		// TODO 被侦查方发送军情
		// TODO 侦查方发送军情
		// TODO 推送目标广播区动画
		return null;
	}

}
