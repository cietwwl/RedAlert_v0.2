package com.youxigu.dynasty2.combat.service.impl;

import com.youxigu.dynasty2.combat.domain.CombatTeam;
import com.youxigu.dynasty2.combat.domain.NPCHeroCombatUnit;
import com.youxigu.dynasty2.combat.domain.PlayHeroCombatUint;
import com.youxigu.dynasty2.combat.service.ICombatTeamService;
import com.youxigu.dynasty2.develop.domain.Castle;
import com.youxigu.dynasty2.develop.service.ICastleService;
import com.youxigu.dynasty2.hero.domain.FullArmyHero;
import com.youxigu.dynasty2.hero.domain.Hero;
import com.youxigu.dynasty2.hero.domain.Troop;
import com.youxigu.dynasty2.hero.service.IHeroService;
import com.youxigu.dynasty2.hero.service.ITroopService;
import com.youxigu.dynasty2.npc.domain.NPCDefine;
import com.youxigu.dynasty2.npc.domain.NPCHero;
import com.youxigu.dynasty2.npc.domain.NPCTroop;
import com.youxigu.dynasty2.user.domain.User;
import com.youxigu.dynasty2.user.service.IUserService;
import com.youxigu.dynasty2.util.BaseException;

/**
 * 玩家队伍构造器
 */
public class PlayerCombatTeamService implements ICombatTeamService {
	private IUserService userService;
	private ICastleService castleService;
	private ITroopService troopService;
	private IHeroService heroService;

	public void setUserService(IUserService userService) {
		this.userService = userService;
	}

	public void setCastleService(ICastleService castleService) {
		this.castleService = castleService;
	}

	public void setTroopService(ITroopService troopService) {
		this.troopService = troopService;
	}

	public void setHeroService(IHeroService heroService) {
		this.heroService = heroService;
	}

	@Override
	public CombatTeam getCombatTeam(long casId) {
		Castle castle = castleService.getCastleById(casId);
		User user = userService.getUserById(castle.getUserId());
		Troop troop = troopService.getTroopById(user.getUserId(),
				user.getTroopId());
		return getCombatTeamByUser(user, troop, false, false);
	}

	@Override
	public CombatTeam getCombatTeam(long casId, boolean isDefender) {
		Castle castle = castleService.getCastleById(casId);
		User user = userService.getUserById(castle.getUserId());
		Troop troop = troopService.getTroopById(user.getUserId(),
				user.getTroopId());
		return getCombatTeamByUser(user, troop, isDefender, false);
	}

	@Override
	public CombatTeam getCombatTeam(long casId, long troopId,
			boolean isDefender) {
		Castle castle = castleService.getCastleById(casId);
		User user = userService.getUserById(castle.getUserId());
		Troop troop = troopService.getTroopById(user.getUserId(), troopId);
		return getCombatTeamByUser(user, troop, isDefender, false);
	}

	@Override
	public CombatTeam getCombatTeamByUser(User user, Troop troop,
			boolean isDefender, boolean fullArmy) {
		return this.getCombatTeamByUser(user, troop, null, isDefender,
				fullArmy);
	}

	@Override
	public CombatTeam getCombatTeamByUser(User user, Troop troop,
			NPCDefine assistNpc, boolean isDefender, boolean fullArmy) {
		long userId = user.getUserId();
		long heroId = user.getHeroId();

		// 君主坦克
		Hero userHero = heroService.getHeroByHeroId(userId, heroId);
		if (fullArmy && userHero != null) {
			userHero = new FullArmyHero(userHero);
		}

		CombatTeam team = new CombatTeam(CombatTeam.TEAM_TYPE_PLAYERHERO);

		// int[] pos = new int[6];
		int idelPosNum = 6;// 统计空位
		if (assistNpc != null) {
			// 有助战军团
			NPCTroop npcTroop = assistNpc.getTroop();
			if (npcTroop != null) {
				NPCHero[] heros = npcTroop.getHeros();
				int index = 0;
				if (heros != null && heros.length > 0) {
					for (NPCHero hero : heros) {
						if (hero != null) {
							if (hero.getSysHeroId() == userHero
									.getSysHeroId()) {
								// 替换为君主坦克
								team.addUint(new PlayHeroCombatUint(userHero,
										index + 1));
							} else {
								team.addUint(
										new NPCHeroCombatUnit(hero, index + 1));
							}
							idelPosNum = idelPosNum - 1;
						}
						index = index + 1;
					}
				}
			}
		} else {
			// 没有助战军团的额情况下使用玩家军团出战
			Hero[] heros = null;
			if (troop != null) {
				if (fullArmy) {
					heros = troop.getFullArmyHeros();
				} else {
					heros = troop.getHeros();
				}

				int index = 0;
				for (Hero hero : heros) {
					if (hero != null) {
						team.addUint(new PlayHeroCombatUint(heros[index],
								index + 1));
						idelPosNum = idelPosNum - 1;
					}
					index = index + 1;
				}
			}
		}

		if (idelPosNum >= 6) {
			throw new BaseException("team初始化失败");
		}

		setTeam(user, userId, team);
		return team;
	}

	private void setTeam(User user, long userId, CombatTeam team) {
		team.setUserId(userId);
		team.setTeamName(user.getUserName());
		team.setIcon(user.getIcon());
		team.setCasId(user.getMainCastleId());
		team.setLevel(user.getUsrLv());
		// if (troop != null) {
		// team.setTroopId(troop.getTroopId());
		// team.setTroopName(troop.getName());
		// team.setTeamPower((int) troopService.getTroopCombatPower(troop,
		// fullArmy));
		// }
		//
		// // 设置联盟
		// if (user.getGuildId() != 0) {
		// team.setGuild(guildService.getGuildById(user.getGuildId()));
		// }
	}

	@Override
	public CombatTeam getNextDefenceCombatTeam(long casId) {
		// TODO Auto-generated method stub
		return null;
	}

	// @Override
	// public CombatTeam getCombatTeamByUserFilter(User user, Troop troop,
	// NPCDefine assistNpc, boolean isDefender, boolean fullArmy) {
	// long userId = user.getUserId();
	// CombatTeam team = new CombatTeam(CombatTeam.TEAM_TYPE_PLAYERHERO);
	// Hero[] heros = new Hero[TroopGridPosition.MAX_TROOP_GRID];
	// int num = TroopGridPosition.MAX_TROOP_GRID;
	// if (troop != null) {
	// Hero[] srcHeros = null;
	// if (fullArmy) {
	// srcHeros = troop.getFullArmyHeros();
	// } else {
	// srcHeros = troop.getHeros();
	// }
	// if (srcHeros == null) {
	// srcHeros = new Hero[TroopGridPosition.MAX_TROOP_GRID];
	// }
	//
	// for (int i = 0; i < TroopGridPosition.MAX_TROOP_GRID; i++) {//
	// 拷贝heros，因为下面会修改heros的数组引用,重置为null
	// heros[i] = srcHeros[i];
	// }
	// }
	//
	// NPCHero npcHeros[] = null;
	// NPCTroop npcTroop = assistNpc.getTroop();
	// if (npcTroop != null && num > 0) {
	// npcHeros = npcTroop.getHeros();
	// }
	// if (npcHeros == null) {
	// npcHeros = new NPCHero[TroopGridPosition.MAX_TROOP_GRID];
	// }
	// boolean mainHero = false;// 标记君主坦克是否已经放入team里面
	// boolean[] pos = new boolean[TroopGridPosition.MAX_TROOP_GRID];
	// for (int i = 0; i < TroopGridPosition.MAX_TROOP_GRID; i++) {
	// Hero hero = heros[i];
	// NPCHero npcHero = npcHeros[i];
	// if (hero == null && npcHero == null) {
	// continue;
	// }
	// // 1. 有一个为null
	// if (hero == null && npcHero != null) {
	// team.addUint(new NPCHeroCombatUnit(npcHero, i + 1));
	// num = num - 1;
	// pos[i] = true;
	// continue;
	// }
	// if (hero != null && npcHero == null) {
	// if (troop.isMainHero(hero.getHeroId())) {
	// mainHero = true;
	// }
	// team.addUint(new PlayHeroCombatUint(hero, i + 1));
	// heros[i] = null;// 重置
	// num = num - 1;
	// pos[i] = true;
	// continue;
	// }
	//
	// // 2. 两个都不为null
	// if (mainHero) {
	// // 剔除上阵坦克,把npc放入team里面
	// team.addUint(new NPCHeroCombatUnit(npcHero, i + 1));
	// num = num - 1;
	// pos[i] = true;
	// continue;
	// } else {
	// // 君主坦克没有上阵,判断是不是君主坦克
	// if (troop.isMainHero(hero.getHeroId())) {// 放入君主坦克
	// mainHero = true;
	// team.addUint(new PlayHeroCombatUint(hero, i + 1));
	// heros[i] = null;// 重置
	// num = num - 1;
	// pos[i] = true;
	// } else {// 放入npc
	// team.addUint(new NPCHeroCombatUnit(npcHero, i + 1));
	// num = num - 1;
	// pos[i] = true;
	// }
	// continue;
	// }
	// }
	// if (num > 0) {
	// // 补充坦克上阵
	// for (Hero h : heros) {
	// if (num <= 0) {
	// break;
	// }
	// if (h == null) {
	// continue;
	// }
	// for (int i = 0; i < TroopGridPosition.MAX_TROOP_GRID; i++) {
	// if (pos[i]) {
	// continue;
	// }
	// team.addUint(new PlayHeroCombatUint(h, i + 1));
	// num = num - 1;
	// pos[i] = true;
	// }
	// }
	// }
	// setTeam(user, userId, team);
	// return team;
	// }
}
