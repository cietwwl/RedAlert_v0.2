package com.youxigu.dynasty2.map.service.impl.command;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.youxigu.dynasty2.armyout.domain.Armyout;
import com.youxigu.dynasty2.armyout.domain.Strategy;
import com.youxigu.dynasty2.armyout.domain.UserArmyout;
import com.youxigu.dynasty2.armyout.service.IArmyoutService;
import com.youxigu.dynasty2.combat.service.ICombatService;
import com.youxigu.dynasty2.develop.service.ICastleResService;
import com.youxigu.dynasty2.develop.service.ICastleService;
import com.youxigu.dynasty2.hero.service.ITroopService;
import com.youxigu.dynasty2.log.imp.LogActiveAct;
import com.youxigu.dynasty2.map.domain.MapCell;
import com.youxigu.dynasty2.map.domain.action.TimeAction;
import com.youxigu.dynasty2.map.service.ICommandDistatcher;
import com.youxigu.dynasty2.map.service.ICommander;
import com.youxigu.dynasty2.map.service.IMapService;
import com.youxigu.dynasty2.treasury.service.ITreasuryService;
import com.youxigu.dynasty2.user.domain.User;
import com.youxigu.dynasty2.user.service.IUserService;
import com.youxigu.dynasty2.util.BaseException;

/**
 * 加载地图数据
 * 
 * @author LK
 * @date 2016年2月18日
 */
public class StrategyCommander implements ICommander {
	public static final Logger log = LoggerFactory
			.getLogger(StrategyCommander.class);

	private Map<Integer, StrategyCommander> commandMap;// 出征执行器
	protected ICommandDistatcher commandDistatcher;
	protected IMapService mapService;
	protected IArmyoutService armyoutService;
	protected IUserService userService;
	protected ICastleResService castleResService;
	protected ITreasuryService treasuryService;
	protected ICastleService castleService;
	protected ITroopService troopService;
	protected ICombatService combatService;

	public void setCommandMap(Map<Integer, StrategyCommander> commandMap) {
		this.commandMap = commandMap;
	}

	public void setCommandDistatcher(ICommandDistatcher commandDistatcher) {
		this.commandDistatcher = commandDistatcher;
	}

	public void setMapService(IMapService mapService) {
		this.mapService = mapService;
	}

	public void setArmyoutService(IArmyoutService armyoutService) {
		this.armyoutService = armyoutService;
	}

	public void setUserService(IUserService userService) {
		this.userService = userService;
	}

	public void setCastleResService(ICastleResService castleResService) {
		this.castleResService = castleResService;
	}

	public void setTreasuryService(ITreasuryService treasuryService) {
		this.treasuryService = treasuryService;
	}

	public void setCastleService(ICastleService castleService) {
		this.castleService = castleService;
	}

	public void setTroopService(ITroopService troopService) {
		this.troopService = troopService;
	}

	public void setCombatService(ICombatService combatService) {
		this.combatService = combatService;
	}

	@Override
	public Map<String, Object> doExcute(TimeAction action) {
		StrategyCommander strategyCommander = commandMap.get(action.getCmd());
		if (strategyCommander != null) {
			strategyCommander.doExcute(action);
		}

		// MapCell mapCell = null;
		// try {
		// mapCell = mapService.getMapCellForWrite(7810912);
		// } catch (InterruptedException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }
		// mapCell.setCasId(0);
		// mapService.updateMapCell(mapCell);
		//
		// try {
		// mapCell = mapService.getMapCellForWrite(7810912);
		// } catch (InterruptedException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }
		// mapCell.setUserId(0);
		// mapService.updateMapCell(mapCell);
		// throw new BaseException();
		// Armyout armyout = armyoutService.getArmyoutForWrite(101L);
		// armyout.setAtkPower(3);
		// armyoutService.updateArmyout(armyout);
		//
		// armyout = armyoutService.getArmyoutForWrite(101L);
		// armyout.setDefPower(1);
		// armyoutService.updateArmyout(armyout);
		// armyoutService.createArmyOut(new Armyout());
		// Armyout armyout = armyoutService.getArmyoutForWrite(101L);
		// armyout.setOutType(1);
		// armyoutService.updateArmyout(armyout);
		// armyoutService.deleteArmyOut(armyout);
		return null;
	}

	@Override
	public void doCheak(Map<String, Object> params) {
		int outType = (Integer) params.get("outType");
		Strategy strategy = armyoutService.getStrategy(outType);
		if (strategy == null) {
			throw new BaseException("策略不存在");
		}
		
		// 锁定出征
		int fromCellId = (Integer) params.get("fromCellId");
		int toCellId = (Integer) params.get("toCellId");
		if(fromCellId >= 0 && toCellId >= 0){
			List<Integer> cellIds = new ArrayList<Integer>(2);
			cellIds.add(fromCellId);
			cellIds.add(toCellId);
			armyoutService.lockArmyout(cellIds);
		}else{
			throw new BaseException("坐标不存在");
		}

		// TODO 这里必须要用副本数据，已经锁了出征不需要再锁坐标了
		MapCell fromCell = mapService.getMapCellForRead(fromCellId);
		MapCell toCell = mapService.getMapCellForRead(toCellId);
		if (fromCell == null) {
			throw new BaseException("出发地坐标不存在");
		}

		if (toCell == null) {
			throw new BaseException("目标不存在");
		}

		if (strategy.getId() == Strategy.COMMAND_202) {
			// 按目标来细分出征类型
			if (!toCell.isOccupied()) {
				// 未被占据，按PVE处理
				strategy = armyoutService.getStrategy(Strategy.COMMAND_208);
			}
		}

		// this.doCheakStrategy(fromCell, toCell, strategy, params);
		StrategyCommander strategyCommander = commandMap.get(strategy.getId());
		if (strategyCommander != null) {
			strategyCommander.doCheakStrategy(fromCell, toCell, strategy,
					params);
		}
	}

	/**
	 * 校验策略是否可以执行
	 * 
	 * @param fromCell 出发地copy
	 * @param toCell 目的地copy
	 * @param strategy
	 * @param params
	 */
	protected void doCheakStrategy(MapCell fromCell, MapCell toCell,
			Strategy strategy, Map<String, Object> params) {

	}

	/**
	 * 校验出征队列
	 * 
	 * @param userArmyout
	 * @param strategy
	 */
	public void cheakArmyoutQueue(UserArmyout userArmyout, Strategy strategy) {
		if (strategy.getConsumeTimes() > 0) {
			if (userArmyout.getPvpNum() >= armyoutService.getMaxPvpTimes()) {
				throw new BaseException("每日出征次数已用尽");
			} else {
				userArmyout.setPvpNum(userArmyout.getPvpNum() + 1);
			}
		}

		if (userArmyout.getNumByOutType(strategy.getId()) >= strategy
				.getMaxTimes()) {
			throw new BaseException("每日" + strategy.getName() + "次数已用尽");
		}

		if (userArmyout.isQueueFull()) {
			throw new BaseException("出征队列已满");
		}
	}

	/**
	 * 更新出征队列
	 * 
	 * @param userArmyout
	 * @param armyout
	 * @param strategy
	 */
	public void updateArmyoutQueue(UserArmyout userArmyout, Armyout armyout, Strategy strategy) {
		if (strategy.getConsumeTimes() > 0) {
			// 增加pvp次数
			userArmyout.setPvpNum(userArmyout.getPvpNum() + 1);
			// 加入出征队列
			userArmyout.setArmyout(armyout.getId());
		}
		// 记录出征次数
		userArmyout.setNumByOutType(strategy.getId());
		armyoutService.updateUserArmyout(userArmyout);
	}

	/**
	 * 消耗
	 * 
	 * @param user
	 * @param strategy
	 * @param fromCell
	 * @param toCell
	 */
	public void doConsume(User user, Strategy strategy, MapCell fromCell,
			MapCell toCell) {
		// 消耗资源
		if (strategy.getResEntId() > 0) {
			double resNum = armyoutService.getBaseResConsume(strategy, fromCell,
					toCell);
			if (resNum > 0) {
				castleResService.doDelRes(user.getMainCastleId(),
						strategy.getResEntId(), (int) resNum, true, true);
			}
		}

		// 消耗道具
		if (strategy.getEntId2() > 0 && strategy.getEntNum2() > 0) {
			treasuryService.deleteItemFromTreasury(user.getUserId(),
					strategy.getEntId2(), strategy.getEntNum2(), true,
					com.youxigu.dynasty2.log.imp.LogItemAct.LOGITEMACT_301);
		}

		// 消耗行动力
		if (strategy.getConsumeActPoint() > 0) {
			userService.doCostCurActPoint(user, strategy.getConsumeActPoint(),
					LogActiveAct.GM_ARMYOUT);
		}
	}

}
