package com.youxigu.dynasty2.combat.service.impl;

import java.sql.Timestamp;

import com.ibatis.sqlmap.engine.cache.CacheModel;
import com.ibatis.sqlmap.engine.cache.memcached.MemcachedManager;
import com.youxigu.dynasty2.combat.dao.ICombatDao;
import com.youxigu.dynasty2.combat.domain.Combat;
import com.youxigu.dynasty2.combat.domain.CombatDB;
import com.youxigu.dynasty2.combat.proto.CombatMsg;
import com.youxigu.dynasty2.combat.service.ICombatService;
import com.youxigu.dynasty2.util.CompressUtils;

public class CombatService implements ICombatService {
	private ICombatDao combatDao;
	// 战斗对象在缓存中保存的时间
	protected int cacheSeconds = 60 * 60;// 10分钟
	// 战斗对象在数据库中保存的天数
	protected int cacheDays = 7;// 7天

	public void setCombatDao(ICombatDao combatDao) {
		this.combatDao = combatDao;
	}

	public void setCacheSeconds(int cacheSeconds) {
		this.cacheSeconds = cacheSeconds;
	}

	public void setCacheDays(int cacheDays) {
		this.cacheDays = cacheDays;
	}

	@Override
	public Combat getCombat(String combatId) {
		return getCombat(combatId, false);
	}

	@Override
	public CombatMsg.Combat getCombatPf(String combatId) {
		return getCombatPf(combatId, false);
	}

	@Override
	public Combat getCombat(String combatId, boolean db) {
		Combat combat = (Combat) MemcachedManager.get(combatId, CacheModel.CACHE_REMOTE);
		if (combat == null && db) {
			CombatDB cb = combatDao.getCombatDB(combatId);
			if (cb != null) {
				combat = (Combat) CompressUtils.decompressAndDeSerialize(cb.getCombatData());
				if (combat != null) {
					MemcachedManager.set(combatId, combat, CacheModel.CACHE_REMOTE, cacheSeconds);
				}
			}
		}
		return combat;

	}

	@Override
	public CombatMsg.Combat getCombatPf(String combatId, boolean db) {
		byte[] datas = (byte[]) MemcachedManager.get(combatId, CacheModel.CACHE_REMOTE);
		if (datas == null && db) {
			CombatDB cb = combatDao.getCombatDB(combatId);
			if (cb != null) {
				datas = cb.getCombatData();
				if (datas != null) {
					MemcachedManager.set(combatId, datas, CacheModel.CACHE_REMOTE, cacheSeconds);
				}
			}
		}
		
		CombatMsg.Combat combat = null;
		if(datas != null) {
			try {
				combat = CombatMsg.Combat.parseFrom(datas);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return combat;
	}

	@Override
	public void saveCombat(Combat combat) {
		saveCombat(combat, false);
	}

	@Override
	public void saveCombatPf(Combat combat) {
		saveCombatPf(combat, false);
	}

	@Override
	public void saveCombat(Combat combat, boolean db) {
		MemcachedManager.set(combat.getCombatId(), combat, CacheModel.CACHE_REMOTE, cacheSeconds);
		if (db) {
			byte[] datas = CompressUtils.serializeAndCompress(combat);
			CombatDB cb = new CombatDB();
			cb.setCombatId(combat.getCombatId());
			cb.setCombatDt(new Timestamp(System.currentTimeMillis()));
			cb.setCombatData(datas);

			combatDao.saveCombatDB(cb);
		}
	}
	
	@Override
	public void saveCombatPf(Combat combat, boolean db) {
		if(combat == null) {
			return;
		}
		byte[] datas = combat.toCombat().toByteArray();
		MemcachedManager.set(combat.getCombatId(), datas, CacheModel.CACHE_REMOTE, cacheSeconds);
		if (db) {
			CombatDB cb = new CombatDB();
			cb.setCombatId(combat.getCombatId());
			cb.setCombatDt(new Timestamp(System.currentTimeMillis()));
			cb.setCombatData(datas);
			combatDao.saveCombatDB(cb);
		}
	}

	@Override
	public void deleteCombat(String combatId, boolean onlyDB) {
		if (!onlyDB) {
			MemcachedManager.delete(combatId, CacheModel.CACHE_REMOTE);
		}
		combatDao.deleteCombatDBById(combatId);
	}

	@Override
	public void cleanCombat() {
		combatDao.deleteCombatDBByDate(cacheDays);
	}

}
