package com.youxigu.dynasty2.combat.service.impl;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import com.youxigu.dynasty2.armyout.domain.Armyout;
import com.youxigu.dynasty2.combat.domain.CombatTeam;
import com.youxigu.dynasty2.combat.domain.NPCHeroCombatUnit;
import com.youxigu.dynasty2.combat.domain.PlayHeroCombatUint;
import com.youxigu.dynasty2.combat.service.ICombatTeamService;
import com.youxigu.dynasty2.develop.domain.Castle;
import com.youxigu.dynasty2.develop.service.ICastleService;
import com.youxigu.dynasty2.hero.domain.FullArmyHero;
import com.youxigu.dynasty2.hero.domain.Hero;
import com.youxigu.dynasty2.hero.domain.Troop;
import com.youxigu.dynasty2.hero.service.IHeroService;
import com.youxigu.dynasty2.hero.service.ITroopService;
import com.youxigu.dynasty2.map.domain.MapCell;
import com.youxigu.dynasty2.map.service.IMapService;
import com.youxigu.dynasty2.npc.domain.NPCDefine;
import com.youxigu.dynasty2.npc.domain.NPCHero;
import com.youxigu.dynasty2.npc.domain.NPCTroop;
import com.youxigu.dynasty2.user.domain.User;
import com.youxigu.dynasty2.user.service.IUserService;
import com.youxigu.dynasty2.util.BaseException;

/**
 * 玩家队伍构造器
 */
public class PlayerCombatTeamService implements ICombatTeamService {
	private ArmyoutComparator armyoutComparator = new ArmyoutComparator();// 按照协防部队到达的时间顺序排序

	private IUserService userService;
	private ICastleService castleService;
	private ITroopService troopService;
	private IHeroService heroService;
	private IMapService mapService;

	public void setUserService(IUserService userService) {
		this.userService = userService;
	}

	public void setCastleService(ICastleService castleService) {
		this.castleService = castleService;
	}

	public void setTroopService(ITroopService troopService) {
		this.troopService = troopService;
	}

	public void setHeroService(IHeroService heroService) {
		this.heroService = heroService;
	}

	public void setMapService(IMapService mapService) {
		this.mapService = mapService;
	}

	public class ArmyoutComparator implements Comparator<Armyout> {
		@Override
		public int compare(Armyout o1, Armyout o2) {
			long t1 = Integer.MAX_VALUE;
			if (o1.getOutArriveDttm() != null) {
				t1 = o1.getOutArriveDttm().getTime();
			}

			long t2 = Integer.MAX_VALUE;
			if (o2.getOutArriveDttm() != null) {
				t2 = o2.getOutArriveDttm().getTime();
			}
			return (int) (t1 - t2);
		}

	}

	@Override
	public CombatTeam getCombatTeam(long casId) {
		Castle castle = castleService.getCastleById(casId);
		User user = userService.getUserById(castle.getUserId());
		Troop troop = troopService.getTroopById(user.getUserId(),
				user.getTroopId());
		return getCombatTeamByUser(user, troop, false, false);
	}

	@Override
	public CombatTeam getCombatTeam(long casId, boolean isDefender) {
		Castle castle = castleService.getCastleById(casId);
		User user = userService.getUserById(castle.getUserId());
		Troop troop = troopService.getTroopById(user.getUserId(),
				user.getTroopId());
		return getCombatTeamByUser(user, troop, isDefender, false);
	}

	@Override
	public CombatTeam getCombatTeam(long casId, long troopId,
			boolean isDefender) {
		Castle castle = castleService.getCastleById(casId);
		User user = userService.getUserById(castle.getUserId());
		Troop troop = troopService.getTroopById(user.getUserId(), troopId);
		return getCombatTeamByUser(user, troop, isDefender, false);
	}

	@Override
	public CombatTeam getCombatTeamByUser(User user, Troop troop,
			boolean isDefender, boolean fullArmy) {
		return this.getCombatTeamByUser(user, troop, null, isDefender,
				fullArmy);
	}

	@Override
	public CombatTeam getCombatTeamByUser(User user, Troop troop,
			NPCDefine assistNpc, boolean isDefender, boolean fullArmy) {
		long userId = user.getUserId();
		long heroId = user.getHeroId();

		// 君主坦克
		Hero userHero = heroService.getHeroByHeroId(userId, heroId);
		if (fullArmy && userHero != null) {
			userHero = new FullArmyHero(userHero);
		}

		CombatTeam team = new CombatTeam(CombatTeam.TEAM_TYPE_PLAYERHERO);

		// int[] pos = new int[6];
		int idelPosNum = 6;// 统计空位
		if (assistNpc != null) {
			// 有助战军团
			NPCTroop npcTroop = assistNpc.getTroop();
			if (npcTroop != null) {
				NPCHero[] heros = npcTroop.getHeros();
				int index = 0;
				if (heros != null && heros.length > 0) {
					for (NPCHero hero : heros) {
						if (hero != null) {
							if (hero.getSysHeroId() == userHero
									.getSysHeroId()) {
								// 替换为君主坦克
								team.addUint(new PlayHeroCombatUint(userHero,
										index + 1));
							} else {
								team.addUint(
										new NPCHeroCombatUnit(hero, index + 1));
							}
							idelPosNum = idelPosNum - 1;
						}
						index = index + 1;
					}
				}
			}
		} else {
			// 没有助战军团的额情况下使用玩家军团出战
			Hero[] heros = null;
			if (troop != null) {
				if (fullArmy) {
					heros = troop.getFullArmyHeros();
				} else {
					heros = troop.getHeros();
				}

				int index = 0;
				for (Hero hero : heros) {
					if (hero != null) {
						team.addUint(new PlayHeroCombatUint(heros[index],
								index + 1));
						idelPosNum = idelPosNum - 1;
					}
					index = index + 1;
				}
			}
		}

		if (idelPosNum >= 6) {
			throw new BaseException("team初始化失败");
		}

		setTeam(user, userId, team);
		return team;
	}

	private void setTeam(User user, long userId, CombatTeam team) {
		team.setUserId(userId);
		team.setTeamName(user.getUserName());
		team.setIcon(user.getIcon());
		team.setCasId(user.getMainCastleId());
		team.setLevel(user.getUsrLv());
		// if (troop != null) {
		// team.setTroopId(troop.getTroopId());
		// team.setTroopName(troop.getName());
		// team.setTeamPower((int) troopService.getTroopCombatPower(troop,
		// fullArmy));
		// }
		//
		// // 设置联盟
		// if (user.getGuildId() != 0) {
		// team.setGuild(guildService.getGuildById(user.getGuildId()));
		// }
	}

	@Override
	public CombatTeam getNextDefenceCombatTeam(long casId) {
		Castle castle = castleService.getCastleById(casId);
		if (castle == null || castle.getStatus() == Castle.STATUS_OVER)
			return null;

		// User user = userService.getUserById(castle.getUserId());

		// 先找协防玩家队伍
		CombatTeam team = getAssistTeam(castle);
		if (team == null) {
			// 找城防方案
			team = getCastleDefPlanTeam(castle);

			// if (team != null) {
			// team.setUserId(user.getUserId());
			// team.setTeamName(user.getUserName());
			// team.setIcon(user.getIcon());
			// team.setLevel(user.getUsrLv());
			// team.setCasId(casId);
			// // 设置联盟
			// if (user.getGuildId() != 0) {
			// team.setGuild(guildService.getGuildById(user.getGuildId()));
			// }
			// }

		}
		return team;
	}

	/**
	 * 协防部队
	 * 
	 * @param castle
	 * @return
	 */
	private CombatTeam getAssistTeam(Castle castle) {
		// List<Armyout> assistArmyOuts = combatDao
		// .getArmyOutsByCasId(castle.getCasId());
		int cellId = MapCell.calculateId(castle.getPosX(), castle.getPosY());
		MapCell toCell = null;
		try {
			toCell = mapService.getMapCellForWrite(cellId);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		List<Armyout> assistArmyOuts = (List<Armyout>) toCell.getStayArmyouts()
				.values();
		if (assistArmyOuts != null) {
			Collections.sort(assistArmyOuts, armyoutComparator);

			for (Armyout out : assistArmyOuts) {
				if (!(out.getStatus() == Armyout.STATUS_STAY
						&& out.getDefenderId() == castle.getCasId()))// 不是本城协防
					continue;

				Castle assistCastle = castleService
						.getCastleById(out.getAttackerId());
				if (assistCastle == null) {
					continue;
				}

				Troop troop = troopService.getTroopById(
						assistCastle.getUserId(), out.getTroopId());

				if (troop == null) {
					continue;
				}
				// // 武将
				// Hero[] heros = troop.getHeros();

				// // 协防不会出现0兵现象，出征必需有兵
				// // int heroNum = 0;
				// // for (Hero hero : heros) {
				// // if (hero != null && hero.getArmyNum() > 0) {
				// // heroNum++;
				// // }
				// // }
				// //
				// // if (heroNum == 0) {
				// // continue;
				// // }
				//
				// // 阵型：影响每个武将的初始位置
				// Formation formation = troopService
				// .getFormationById(troop.getFormationId());
				// if (formation == null) {
				// formation = troopService.getFormationById(
				// AppConstants.FORMATION_DEFAULT_ID);
				// }

				User user = userService.getUserById(assistCastle.getUserId());
				CombatTeam team = this.getCombatTeamByUser(user, troop, true,
						false);
						// CombatTeam team = new CombatTeam(
						// CombatTeam.TEAM_TYPE_PLAYERHERO_ASSIT);
						//
						// // addUserEffect(team, assistCastle.getUserId());
						// // 保存协防队伍的出征信息，在战斗完毕后会用到
						// team.setParams(out);

				// List<byte[]> fPostions = formation.getPostions();
				// int posNum = fPostions.size();
				// int num = 0;
				// for (int i = 0; i < heros.length; i++) {
				// if (heros[i] != null && num < posNum) {
				// byte[] pos = fPostions.get(i);
				//
				// team.addUint(new PlayHeroCombatUint(heros[i],
				// (byte) (CombatMap.MAX_X - 1 - pos[0]),
				// (byte) pos[1], CombatMap.DIRECTION_WEST));
				// num++;
				// }
				// }

				// // 设置联盟
				// User user =
				// userService.getUserById(assistCastle.getUserId());
				// team.setUserId(user.getUserId());
				// team.setCasId(assistCastle.getCasId());
				// team.setIcon(user.getIcon());
				// team.setTeamName(user.getUserName());
				// team.setLevel(user.getUsrLv());
				// if (troop != null) {
				// team.setTroopId(troop.getTroopId());
				// team.setTroopName(troop.getName());
				// team.setTeamPower(
				// (int) troopService.getTroopCombatPower(troop));
				// }
				// if (user.getGuildId() != 0) {
				// team.setGuild(guildService.getGuildById(user.getGuildId()));
				// }

				// addArmyAdviser(user, team, true, 3);
				return team;

			}
		}
		return null;
	}

	/**
	 * 得到城池预定的防守队伍
	 * 
	 * @param casId
	 * @return
	 */
	private CombatTeam getCastleDefPlanTeam(Castle castle) {
		// CastleDefPlan defPlan = castleService
		// .getCastleDefPlan(castle.getCasId());
		// long userId = castle.getUserId();
		// List<CombatUnit> units = new ArrayList<CombatUnit>();
		// double power = 0;
		// Formation formation = null;
		// Troop troop = null;
		// int heroNum = 0;
		// if (defPlan != null && defPlan.getTroopId() > 0) {
		//
		// troop = troopService.getTroopById(userId, defPlan.getTroopId());
		// if (troop != null) {
		//
		// // 武将
		// Hero[] heros = troop.getHeros();
		//
		// for (Hero hero : heros) {
		// if (hero != null && hero.idle()) {
		// heroNum++;
		// }
		// }
		//
		// if (heroNum != 0) {
		// // 阵型：影响每个武将的初始位置
		// formation = troopService
		// .getFormationById(troop.getFormationId());
		// // int[] startPos = getStartPosAndSpace(heroNum);// y偏移量
		// // int start = 0;
		// power = troopService.getTroopCombatPower(troop);
		//
		// List<byte[]> fPostions = formation.getPostions();
		// int posNum = fPostions.size();
		// int num = 0;
		// for (int i = 0; i < heros.length; i++) {
		// if (heros[i] != null && num < posNum) {
		// byte[] pos = fPostions.get(i);
		//
		// units.add(
		// new PlayHeroCombatUint(heros[i],
		// (byte) (CombatMap.MAX_X - 1
		// - pos[0]),
		// (byte) pos[1],
		// CombatMap.DIRECTION_WEST));
		// num++;
		// }
		// }
		// }
		//
		// }
		//
		// }
		// if (formation == null) {
		// formation = troopService
		// .getFormationById(AppConstants.FORMATION_DEFAULT_ID);
		// }
		// // 即使没有防守队伍，也要加上城墙+城防
		// // 加城墙+城防
		// List<CombatUnit> appends =
		// getWallAndTowerArmyTeam(castle.getCasId());
		// if (appends != null) {
		// units.addAll(appends);
		// }
		// if (units != null && units.size() > 0) {
		// CombatTeam team = new CombatTeam(CombatTeam.TEAM_TYPE_PLAYERHERO,
		// formation);
		// team.setUnits(units);
		//
		// if (troop != null) {
		// team.setTroopId(troop.getTroopId());
		// team.setTroopName(troop.getName());
		// }
		//
		// team.setTeamPower((int) power);
		//
		// addUserEffect(team, userId);
		//
		// // team.setUserId(userId);
		// // team.setCasId(castle.getCasId());
		// // team.setIcon(user.getIcon());
		// // team.setTeamName(user.getUserName());
		// // team.setLevel(user.getUsrLv());
		// // if (troop != null) {
		// // team.setTroopId(troop.getTroopId());
		// // team.setTroopName(troop.getName());
		// // team.setTeamPower((int) troopService
		// // .getTroopCombatPower(troop));
		// // }
		// // if (user.getGuildId() != 0) {
		// // team.setGuild(guildService.getGuildById(user.getGuildId()));
		// // }
		// if (heroNum > 0) {
		// User user = userService.getUserById(userId);
		// addArmyAdviser(user, team, true, 3);
		// }
		// return team;
		// }

		return null;

	}

	// @Override
	// public CombatTeam getCombatTeamByUserFilter(User user, Troop troop,
	// NPCDefine assistNpc, boolean isDefender, boolean fullArmy) {
	// long userId = user.getUserId();
	// CombatTeam team = new CombatTeam(CombatTeam.TEAM_TYPE_PLAYERHERO);
	// Hero[] heros = new Hero[TroopGridPosition.MAX_TROOP_GRID];
	// int num = TroopGridPosition.MAX_TROOP_GRID;
	// if (troop != null) {
	// Hero[] srcHeros = null;
	// if (fullArmy) {
	// srcHeros = troop.getFullArmyHeros();
	// } else {
	// srcHeros = troop.getHeros();
	// }
	// if (srcHeros == null) {
	// srcHeros = new Hero[TroopGridPosition.MAX_TROOP_GRID];
	// }
	//
	// for (int i = 0; i < TroopGridPosition.MAX_TROOP_GRID; i++) {//
	// 拷贝heros，因为下面会修改heros的数组引用,重置为null
	// heros[i] = srcHeros[i];
	// }
	// }
	//
	// NPCHero npcHeros[] = null;
	// NPCTroop npcTroop = assistNpc.getTroop();
	// if (npcTroop != null && num > 0) {
	// npcHeros = npcTroop.getHeros();
	// }
	// if (npcHeros == null) {
	// npcHeros = new NPCHero[TroopGridPosition.MAX_TROOP_GRID];
	// }
	// boolean mainHero = false;// 标记君主坦克是否已经放入team里面
	// boolean[] pos = new boolean[TroopGridPosition.MAX_TROOP_GRID];
	// for (int i = 0; i < TroopGridPosition.MAX_TROOP_GRID; i++) {
	// Hero hero = heros[i];
	// NPCHero npcHero = npcHeros[i];
	// if (hero == null && npcHero == null) {
	// continue;
	// }
	// // 1. 有一个为null
	// if (hero == null && npcHero != null) {
	// team.addUint(new NPCHeroCombatUnit(npcHero, i + 1));
	// num = num - 1;
	// pos[i] = true;
	// continue;
	// }
	// if (hero != null && npcHero == null) {
	// if (troop.isMainHero(hero.getHeroId())) {
	// mainHero = true;
	// }
	// team.addUint(new PlayHeroCombatUint(hero, i + 1));
	// heros[i] = null;// 重置
	// num = num - 1;
	// pos[i] = true;
	// continue;
	// }
	//
	// // 2. 两个都不为null
	// if (mainHero) {
	// // 剔除上阵坦克,把npc放入team里面
	// team.addUint(new NPCHeroCombatUnit(npcHero, i + 1));
	// num = num - 1;
	// pos[i] = true;
	// continue;
	// } else {
	// // 君主坦克没有上阵,判断是不是君主坦克
	// if (troop.isMainHero(hero.getHeroId())) {// 放入君主坦克
	// mainHero = true;
	// team.addUint(new PlayHeroCombatUint(hero, i + 1));
	// heros[i] = null;// 重置
	// num = num - 1;
	// pos[i] = true;
	// } else {// 放入npc
	// team.addUint(new NPCHeroCombatUnit(npcHero, i + 1));
	// num = num - 1;
	// pos[i] = true;
	// }
	// continue;
	// }
	// }
	// if (num > 0) {
	// // 补充坦克上阵
	// for (Hero h : heros) {
	// if (num <= 0) {
	// break;
	// }
	// if (h == null) {
	// continue;
	// }
	// for (int i = 0; i < TroopGridPosition.MAX_TROOP_GRID; i++) {
	// if (pos[i]) {
	// continue;
	// }
	// team.addUint(new PlayHeroCombatUint(h, i + 1));
	// num = num - 1;
	// pos[i] = true;
	// }
	// }
	// }
	// setTeam(user, userId, team);
	// return team;
	// }
}
