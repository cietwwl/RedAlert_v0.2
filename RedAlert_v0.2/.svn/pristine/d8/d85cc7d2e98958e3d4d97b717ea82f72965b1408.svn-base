package com.youxigu.dynasty2.map.service.impl;

import java.util.List;

import org.shardbatis.spring.jdbc.transaction.DefaultTransactionListener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.support.DefaultTransactionStatus;

import com.manu.core.ServiceLocator;
import com.youxigu.dynasty2.map.domain.MapCell;
import com.youxigu.dynasty2.map.service.IAsyUpdateMapService;
import com.youxigu.dynasty2.map.service.IMapService;

/**
 * 坐标点更新事务回滚机制
 * 
 * @author LK
 * @date 2016年2月18日
 */
public class MapCellTransactionListener extends DefaultTransactionListener {
    private static final Logger log = LoggerFactory.getLogger(MapCellTransactionListener.class);

	@Override
	public void doBeginAfter(Object transaction,
			TransactionDefinition definition) {
		ThreadLocalMapCellCache.setInTrans(true);
	}

	@Override
	public void doCommitAfter(DefaultTransactionStatus status) {
		ThreadLocalMapCellCache.setInTrans(false);
		List<MapCell> messages = null;
		try {
			messages = ThreadLocalMapCellCache.getData();
			if (messages != null) {
				IAsyUpdateMapService asyUpdateMapService = (IAsyUpdateMapService) ServiceLocator
						.getSpringBean("asyUpdateMapService");

				IMapService mapService = (IMapService) ServiceLocator
						.getSpringBean("mapService");
				for (MapCell mapCell : messages) {
					asyUpdateMapService.updateCityCell(mapCell);
					MapCell cellCache = mapService.getMapCell(mapCell.getId());
					if (cellCache != null) {
						cellCache.copyFrom(mapCell);
					}
				}
			}
		} catch (Exception e) {
			// 吃掉消息发送异常
			e.printStackTrace();
		} finally {
            unlockMapCellsInCache();
			ThreadLocalMapCellCache.clean();
			// EventMessageFilter.clear();
		}

	}

	@Override
	public void doRollbackAfter(DefaultTransactionStatus status) {
        unlockMapCellsInCache();
        ThreadLocalMapCellCache.clean();
    }

    private void unlockMapCellsInCache() {
        List<MapCell> lockedCells = ThreadLocalMapCellCache.getLockedMapCells();
        if (lockedCells != null) {
            for (MapCell mapCell : lockedCells) {
                //吃掉异常，避免一个MapCell释放异常影响到其它MapCell
                try {
                    mapCell.getLock().unlock();
                    if (log.isDebugEnabled()) {
                        log.debug("MapCell({},{}) unlocked", mapCell.getPosX(), mapCell.getPosY());
                    }
                } catch (Exception e) {
                    log.error("unlock MapCell({" + mapCell.getPosX() + "},{" + mapCell.getPosY() + "}) failed", e);
                }
            }
        }
    }

}
